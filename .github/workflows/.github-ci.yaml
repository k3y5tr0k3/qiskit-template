name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Get Python Version
        id: python-version
        run: echo "::set-output name=version::$(python --version | awk '{print $2}')"

      - name: Create Python Version Badge
        uses: actions/github-script@v6
        with:
          script: |
            const version = github.context.actions.outputs['python-version'];
            const badgeUrl = `https://img.shields.io/badge/python-${version}-blue.svg`;
            console.log(`::set-output name=badgeUrl::${badgeUrl}`);

      - name: Add Python Version Badge to README
        uses: actions/github-script@v6
        with:
          script: |
            const badgeUrl = github.context.actions.outputs['badgeUrl'];
            const readmePath = '.github/README.md';
            const readmeContent = core.getInput('readmeContent');
            const newReadmeContent = readmeContent.replace(/<!-- python-version-badge -->/, `![Python Version](${badgeUrl})`);
            core.setOutput('newReadmeContent', newReadmeContent);
            core.writeFile(readmePath, newReadmeContent);

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test-requirements.txt

      - name: Run pytest
        env:
          IBMQ_API_KEY: ${{ secrets.IBMQ_API_KEY }}
        run: pytest

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5.1.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: junit/test-results.xml
        if: ${{ always() }}

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage
          path: coverage.xml
        if: ${{ always() }}

      - name: Ruff check
        run: ruff check
